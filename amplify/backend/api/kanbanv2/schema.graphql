type TaskComments @model @auth(rules: [{allow: public, operations: [create, read]}, {allow: owner}, {allow: groups, groups: ["administrator"], operations: [read, create, update, delete]}]) {
  id: ID!
  comment: String!
  TaskCommentsBelongsToOneUser: Users! @hasOne
}

type StepsTasks @model @auth(rules: [{allow: public}]) {
  id: ID!
  order: Int!
  StepsTasksBelongsToOneStep: Steps! @hasOne
  StepsTasksActionPermormerBelongToUser: Users! @hasOne
}

type TasksUsersAssigneed @model @auth(rules: [{allow: public}]) {
  id: ID!
  TasksUsersAssigneedBelongsToUser: Users! @hasOne
}

enum TaskPriorityEnum {
  LOW
  MEDIUM
  HIGHT
}

enum TaskEnum {
  ACTIVE
  INACTIVE
}

type Tasks @model @auth(rules: [{allow: public, operations: [create, read]}, {allow: owner}, {allow: groups, groups: ["administrator"], operations: [read, create, update, delete]}]) {
  id: ID!
  description: String!
  priority: TaskPriorityEnum!
  due_to: AWSDateTime
  ReporterUser: Users! @hasOne
  title: String!
  tags: String
}

enum StepEnums {
  ACTIVE
  INACTIVE
}

type Steps @model @auth(rules: [{allow: public, operations: [create, read]}, {allow: owner}, {allow: groups, groups: ["administrator"], operations: [read, create, update, delete]}]) {
  id: ID!
  title: String!
  description: String!
  order: Int!
  status: StepEnums!
  projectsID: ID! @index(name: "byProjects")
  OneStepBelongsToProject: Projects! @belongsTo(fields: ["projectsID"])
}

enum ProjectEnums {
  ACTIVE
  INACTIVE
}

type Projects @model @auth(rules: [{allow: public, operations: [read, create]}, {allow: owner}, {allow: groups, groups: ["administrator"], operations: [read, create, update, delete]}]) {
  id: ID!
  title: String!
  description: String!
  status: ProjectEnums!
  ProjectUser: Users! @hasOne
  OneProjectHasManySteps: [Steps!] @hasMany(indexName: "byProjects", fields: ["id"])
}

type Users @model @auth(rules: [{allow: public, operations: [read]}, {allow: groups, groups: ["administrator"], operations: [read, create, update, delete]}]) {
  id: ID!
  name: String!
  family_name: String!
  email: String!
}
 